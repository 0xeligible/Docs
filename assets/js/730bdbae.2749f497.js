"use strict";(self.webpackChunkrealran=self.webpackChunkrealran||[]).push([[767],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),m=o,h=p["".concat(l,".").concat(m)]||p[m]||d[m]||a;return n?r.createElement(h,i(i({ref:t},u),{},{components:n})):r.createElement(h,i({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},4149:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return d}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),i=["components"],s={},l=void 0,c={unversionedId:"Getting Started/Get a Random Number",id:"Getting Started/Get a Random Number",title:"Get a Random Number",description:"One simple example is shown below to demonstrate how to use Remix IDE to deploy the VRFConsumer.sol contract on PlatON and get random values.",source:"@site/docs/Getting Started/Get a Random Number.md",sourceDirName:"Getting Started",slug:"/Getting Started/Get a Random Number",permalink:"/Docs/Getting Started/Get a Random Number",editUrl:"https://github.com/realran/Docs/tree/main/docs/Getting Started/Get a Random Number.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/Docs/Getting Started/overview"}},u={},d=[{value:"Preparation",id:"preparation",level:2},{value:"MetaMask Setup",id:"metamask-setup",level:2},{value:"Deploy a VRF consumer contract",id:"deploy-a-vrf-consumer-contract",level:2},{value:"Import VRFContract Repo",id:"import-vrfcontract-repo",level:3},{value:"Compile the <code>VRFConsumer.sol</code> contract",id:"compile-the-vrfconsumersol-contract",level:3},{value:"Deploy the <code>VRFConsumer.sol</code> contract",id:"deploy-the-vrfconsumersol-contract",level:3},{value:"Request random values",id:"request-random-values",level:3},{value:"Analyze the <code>VRFConsumer</code> contract",id:"analyze-the-vrfconsumer-contract",level:2}],p={toc:d};function m(e){var t=e.components,s=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},p,s,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"One simple example is shown below to demonstrate how to use Remix IDE to deploy the ",(0,a.kt)("inlineCode",{parentName:"p"},"VRFConsumer.sol")," contract on PlatON and get random values. "),(0,a.kt)("h2",{id:"preparation"},"Preparation"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"MetaMask"),(0,a.kt)("li",{parentName:"ul"},"The Remix IDE"),(0,a.kt)("li",{parentName:"ul"},"PlatON RPC URL:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Mainnet: ",(0,a.kt)("inlineCode",{parentName:"li"},"https://openapi2.platon.network/rpc")),(0,a.kt)("li",{parentName:"ul"},"Devnet: ",(0,a.kt)("inlineCode",{parentName:"li"},"https://devnetopenapi2.platon.network/rpc")))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"VRFCoordinator")," contract address\uff1a",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Mainnet: ",(0,a.kt)("inlineCode",{parentName:"li"},"0x57baee54708657302e96004279a15d7c98cd1a42")),(0,a.kt)("li",{parentName:"ul"},"Devnet: ",(0,a.kt)("inlineCode",{parentName:"li"},"0x356d552150f460f57Cd722DC4f3D03A3f2B8386C")))),(0,a.kt)("li",{parentName:"ul"},"Faucet (optional): ",(0,a.kt)("inlineCode",{parentName:"li"},"https://faucet.platon.network/faucet"))),(0,a.kt)("h2",{id:"metamask-setup"},"MetaMask Setup"),(0,a.kt)("p",null,"MetaMask is the most widely used browser plug-in wallet and users can easily interact with PlatON Devnet and Mainnet. See the ",(0,a.kt)("a",{parentName:"p",href:"https://devdocs.platon.network/docs/en/MetaMask/"},"MetaMask Configure PlatON/Alaya Network")," to learn to use it."),(0,a.kt)("h2",{id:"deploy-a-vrf-consumer-contract"},"Deploy a VRF consumer contract"),(0,a.kt)("h3",{id:"import-vrfcontract-repo"},"Import VRFContract Repo"),(0,a.kt)("p",null,"Open the ",(0,a.kt)("a",{parentName:"p",href:"https://remix.ethereum.org/#url=https://github.com/realran/VRFContract/blob/main/sample/VRFConsumer.sol"},"VRFConsumer.sol")," contract in Remix."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"contracts_structure",src:n(5699).Z,width:"1920",height:"937"})," "),(0,a.kt)("p",null,"For this example, use the ",(0,a.kt)("inlineCode",{parentName:"p"},"VRFConsumer.sol")," sample contract in the sample folder. This contract imports the following dependencies:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"VRFCoordinator.sol")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"VRFConsumerBase.sol"))),(0,a.kt)("p",null,"The sample contract imports the VRFContract codebase and uses relative paths to import dependencies. However, it is not a must. You could directly import dependencies from ",(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@realrancrypto/contracts"},"NPM")," without loading the codebase. To do it, just add codes at the beginning of your consumer contract:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'import "@realrancrypto/contracts/src/dev/VRFCoordinator.sol";\nimport "@realrancrypto/contracts/src/VRFConsumerBase.sol";\n')),(0,a.kt)("p",null,"The contract also includes pre-configured values for the necessary request parameters such as ",(0,a.kt)("inlineCode",{parentName:"p"},"keyHash"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"callbackGasLimit"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"requestConfirmations"),". When you deploy your own contract, you can use the same value as provided in the contract. For the parameter ",(0,a.kt)("inlineCode",{parentName:"p"},"vrfCoordinator"),", You can change its value based on different networks."),(0,a.kt)("h3",{id:"compile-the-vrfconsumersol-contract"},"Compile the ",(0,a.kt)("inlineCode",{parentName:"h3"},"VRFConsumer.sol")," contract"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"consumer_compile",src:n(5586).Z,width:"1920",height:"937"})),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Open the ",(0,a.kt)("inlineCode",{parentName:"li"},"VRFConsumer.sol")," contract in Remix."),(0,a.kt)("li",{parentName:"ol"},"Click the ",(0,a.kt)("strong",{parentName:"li"},"Solidity compiler")," tab on the left sidebar."),(0,a.kt)("li",{parentName:"ol"},"Click the ",(0,a.kt)("strong",{parentName:"li"},"Compile VRFConsumer.sol")," button. Ignore the warnings here.")),(0,a.kt)("h3",{id:"deploy-the-vrfconsumersol-contract"},"Deploy the ",(0,a.kt)("inlineCode",{parentName:"h3"},"VRFConsumer.sol")," contract"),(0,a.kt)("p",null,"Before the deployment, please get the ",(0,a.kt)("inlineCode",{parentName:"p"},"VRFCoordinator")," address based on the network in the ",(0,a.kt)("a",{href:"#Preparation"},"Preparation section"),". In the ",(0,a.kt)("inlineCode",{parentName:"p"},"VRFConsumer.sol")," contract, use ",(0,a.kt)("strong",{parentName:"p"},"Devnet's")," ",(0,a.kt)("inlineCode",{parentName:"p"},"VRFCoordinator")," address."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"consumer_deploy",src:n(5083).Z,width:"1920",height:"937"})),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"On the Remix left sidebar, click the ",(0,a.kt)("strong",{parentName:"li"},"Deploy & run transactions")," tab."),(0,a.kt)("li",{parentName:"ol"},"select the ",(0,a.kt)("strong",{parentName:"li"},"Injected Web3")," Environment."),(0,a.kt)("li",{parentName:"ol"},"Select the ",(0,a.kt)("inlineCode",{parentName:"li"},"VRFConsumer")," contract and click the ",(0,a.kt)("strong",{parentName:"li"},"Deploy")," button. MetaMask opens and asks you to confirm the transaction.")),(0,a.kt)("h3",{id:"request-random-values"},"Request random values"),(0,a.kt)("p",null,"The deployed ",(0,a.kt)("inlineCode",{parentName:"p"},"VRFConsumer")," contract requests random values from ",(0,a.kt)("inlineCode",{parentName:"p"},"VRFCoordinator"),", receives those values, and stores them in the ",(0,a.kt)("inlineCode",{parentName:"p"},"s_randomWords")," array. Run the ",(0,a.kt)("inlineCode",{parentName:"p"},"syncRequestRandomWords()")," function to synchronously request them."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Request 10 VRF values")),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"consumer_request",src:n(3964).Z,width:"1920",height:"937"})),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},"Get the 10th VRF value at index 9")),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"consumer_ret",src:n(6316).Z,width:"1920",height:"937"})),(0,a.kt)("h2",{id:"analyze-the-vrfconsumer-contract"},"Analyze the ",(0,a.kt)("inlineCode",{parentName:"h2"},"VRFConsumer")," contract"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport "@realrancrypto/contracts@1.0.0/src/dev/VRFCoordinator.sol";\nimport "@realrancrypto/contracts@1.0.0/src/VRFConsumerBase.sol";\n\ncontract VRFConsumer is VRFConsumerBase {\n VRFCoordinator COORDINATOR;\n \n // PlatON DevNet coordinator. \n address vrfCoordinator = 0x356d552150f460f57Cd722DC4f3D03A3f2B8386C;\n \n // Default parameters, do not need to be modified.\n bytes32 keyHash = 0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc;\n\n // Your subscription ID.\n uint64 s_subscriptionId;\n\n // Default parameters, do not need to be modified.\n uint32 callbackGasLimit = 100;\n\n // Default parameters, do not need to be modified.\n uint16 requestConfirmations = 100;\n\n uint256 public s_requestId;\n address s_owner;\n\n uint256[] public s_randomWords;\n\n constructor() VRFConsumerBase(vrfCoordinator) {\n   COORDINATOR = VRFCoordinator(vrfCoordinator);\n   s_owner = msg.sender;\n   //Create a new subscription when you deploy the contract.\n   createNewSubscription();\n }\n\n // Create a new subscription when the contract is initially deployed.\n function createNewSubscription() private onlyOwner {\n   // Create a subscription with a new subscription ID.\n   address[] memory consumers = new address[](1);\n   consumers[0] = address(this);\n   s_subscriptionId = COORDINATOR.createSubscription();\n   // Add this contract as a consumer of its own subscription.\n   COORDINATOR.addConsumer(s_subscriptionId, consumers[0]);\n }\n\n // Assumes the subscription is funded sufficiently.\n function requestRandomWords(uint32 numWords) external {\n   // Will revert if subscription is not set and funded.\n   s_requestId = COORDINATOR.requestRandomWords(\n     keyHash,\n     s_subscriptionId,\n     requestConfirmations,\n     callbackGasLimit,\n     numWords\n   );\n }\n\n // Assumes the subscription is funded sufficiently.\n function syncRequestRandomWords(uint32 numWords) external {\n   // Will revert if subscription is not set and funded.\n   uint256[] memory randomWords = COORDINATOR.syncRequestRandomWords(\n     keyHash,\n     s_subscriptionId,\n     requestConfirmations,\n     callbackGasLimit,\n     numWords\n   );\n   s_randomWords = randomWords;\n }\n\n function fulfillRandomWords(\n   uint256, /* requestId */\n   uint256[] memory randomWords\n ) internal override {\n   s_randomWords = randomWords;\n }\n\n modifier onlyOwner() {\n   require(msg.sender == s_owner);\n   _;\n }\n}\n')),(0,a.kt)("p",null," In this example, The ",(0,a.kt)("inlineCode",{parentName:"p"},"VRFConsumer")," contract address is the ",(0,a.kt)("inlineCode",{parentName:"p"},"VRFCoordinator")," subscription owner and uses that subscription. The consumer contract uses static configuration parameters."),(0,a.kt)("p",null," The contract includes the following parameters:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"s_subscriptionId"),": the subscription ID."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"vrfCoordinator"),": the address of the PlatON VRFCoordinator contract."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"s_randomWords"),": used to store random values.")),(0,a.kt)("p",null," The contract includes the following functions:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"createNewSubscription()"),": creates a new subscription and add the consumer itself to the subscription when the contract is initially deployed."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"requestRandomWords()"),": requests random values asynchronously."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"fulfillRandomWords()"),": receives random values and stores them with the contract."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"syncRequestRandomWords()"),": requests random values synchronously.")))}m.isMDXComponent=!0},5586:function(e,t,n){t.Z=n.p+"assets/images/consumer_compile-a734e0262e0a7bd88f4262f65d63e820.png"},5083:function(e,t,n){t.Z=n.p+"assets/images/consumer_deploy-cd03a76063ff09d99710c679761a728b.png"},3964:function(e,t,n){t.Z=n.p+"assets/images/consumer_request-717f6738a76dcb1452da93b76c84b955.png"},6316:function(e,t,n){t.Z=n.p+"assets/images/consumer_ret-db7a1d9a53750a0d961684525117c96e.png"},5699:function(e,t,n){t.Z=n.p+"assets/images/contracts_structure-c77fa4102969d1d5f0c4cfe590d48535.png"}}]);